CCS PCM C Compiler, Version 5.015, 5967               10-mar.-21 00:01

               Filename:   C:\Users\trigger\Desktop\Universidad\PIC CSS COMPILER AND PROTEUS\Programacion Y control de perifericos\Proyecto numero  (21)\PIC CSS Compiler\main.lst

               ROM used:   122 words (1%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           14 (4%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   019
0003:  NOP
.................... #include <main.h> 
.................... #include <16F876.h> 
.................... //////////// Standard Header file for the PIC16F876 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F876 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
0004:  MOVLW  28
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
....................  
....................  
....................  
.................... #use standard_io(a) 
.................... #use standard_io(c) 
....................  
.................... void main() 
0019:  MOVF   03,W
001A:  ANDLW  1F
001B:  MOVWF  03
001C:  MOVLW  FF
001D:  MOVWF  20
001E:  BSF    03.5
001F:  BSF    1F.0
0020:  BSF    1F.1
0021:  BSF    1F.2
0022:  BCF    1F.3
0023:  BCF    03.7
.................... { 
....................    set_tris_a(0b111111); 
0024:  MOVLW  3F
0025:  MOVWF  05
....................    set_tris_b(0b00000000); 
0026:  MOVLW  00
0027:  MOVWF  06
....................    int steps[4]={0b00001010,0b00001001,0b00000101,0b00000110}; 
0028:  MOVLW  0A
0029:  BCF    03.5
002A:  MOVWF  21
002B:  MOVLW  09
002C:  MOVWF  22
002D:  MOVLW  05
002E:  MOVWF  23
002F:  MOVLW  06
0030:  MOVWF  24
....................     
....................     
....................    while(TRUE) 
....................    { 
....................       if (input(PIN_A0)==1) 
0031:  BSF    03.5
0032:  BSF    05.0
0033:  BCF    03.5
0034:  BTFSS  05.0
0035:  GOTO   052
....................       {       
....................          for (int i=0; i<4; i++){ 
0036:  CLRF   25
0037:  MOVF   25,W
0038:  SUBLW  03
0039:  BTFSS  03.0
003A:  GOTO   051
....................             output_c(steps[i]); 
003B:  MOVLW  21
003C:  ADDWF  25,W
003D:  MOVWF  04
003E:  BCF    03.7
003F:  MOVF   00,W
0040:  MOVWF  27
0041:  MOVLW  00
0042:  MOVWF  20
0043:  BSF    03.5
0044:  CLRF   07
0045:  BCF    03.5
0046:  MOVF   27,W
0047:  MOVWF  07
....................             delay_ms(500); 
0048:  MOVLW  02
0049:  MOVWF  27
004A:  MOVLW  FA
004B:  MOVWF  28
004C:  CALL   004
004D:  DECFSZ 27,F
004E:  GOTO   04A
004F:  INCF   25,F
0050:  GOTO   037
....................          } 
....................       } 
0051:  GOTO   078
....................       else if (input(PIN_A1)==1) 
0052:  BSF    03.5
0053:  BSF    05.1
0054:  BCF    03.5
0055:  BTFSS  05.1
0056:  GOTO   075
....................       { 
....................          for (int j=4; j>=1; j--){ 
0057:  MOVLW  04
0058:  MOVWF  26
0059:  MOVF   26,W
005A:  SUBLW  00
005B:  BTFSC  03.0
005C:  GOTO   074
....................             output_c(steps[j-1]); 
005D:  MOVLW  01
005E:  SUBWF  26,W
005F:  ADDLW  21
0060:  MOVWF  04
0061:  BCF    03.7
0062:  MOVF   00,W
0063:  MOVWF  27
0064:  MOVLW  00
0065:  MOVWF  20
0066:  BSF    03.5
0067:  CLRF   07
0068:  BCF    03.5
0069:  MOVF   27,W
006A:  MOVWF  07
....................             delay_ms(500); 
006B:  MOVLW  02
006C:  MOVWF  27
006D:  MOVLW  FA
006E:  MOVWF  28
006F:  CALL   004
0070:  DECFSZ 27,F
0071:  GOTO   06D
0072:  DECF   26,F
0073:  GOTO   059
....................          } 
....................       }  
0074:  GOTO   078
....................       else 
....................       { 
....................          delay_ms(20); 
0075:  MOVLW  14
0076:  MOVWF  28
0077:  CALL   004
....................       } 
0078:  GOTO   031
....................        
....................       //TODO: User Code 
....................    } 
....................  
.................... } 
0079:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
